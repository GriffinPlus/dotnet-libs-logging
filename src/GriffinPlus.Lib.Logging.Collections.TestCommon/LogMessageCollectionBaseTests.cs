///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// This file is part of the Griffin+ common library suite (https://github.com/griffinplus/dotnet-libs-logging)
// The source code is licensed under the MIT license.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Linq;

using Xunit;

namespace GriffinPlus.Lib.Logging.Collections
{

	/// <summary>
	/// Unit tests targeting the <see cref="ILogMessageCollectionCommon{TMessage}"/> interface of collection implementations.
	/// This class tests extended interfaces separately to cover explicit interface implementations, if existing.
	/// </summary>
	public abstract class LogMessageCollectionBaseTests<TLogMessageCollection> :
		LogMessageCollectionCommonBaseTests<TLogMessageCollection>
		where TLogMessageCollection : class, ILogMessageCollection<LogMessage>
	{
		#region AddRange()

		/// <summary>
		/// Tests adding multiple log messages the the collection using <see cref="ILogMessageCollection{TMessage}.AddRange"/>.
		/// Should throw <see cref="NotSupportedException"/>, if the collection is read-only.
		/// </summary>
		/// <param name="initialCollectionSize">Number of messages to put into the collection before running the test.</param>
		/// <param name="numberOfMessagesToAdd">Number of messages to add at once.</param>
		[Theory]
		[InlineData(0, 1)]
		[InlineData(0, 10)]
		[InlineData(1000, 1)]
		[InlineData(1000, 10)]
		protected virtual void ILogMessageCollectionT_AddRange(int initialCollectionSize, int numberOfMessagesToAdd)
		{
			Common_AddRange(
				initialCollectionSize,
				numberOfMessagesToAdd,
				(collection, messages) => collection.AddRange(messages));
		}

		/// <summary>
		/// Tests adding multiple log messages the the collection using <see cref="ILogMessageCollection{TMessage}.AddRange"/>.
		/// Should throw <see cref="ArgumentNullException"/>.
		/// </summary>
		/// <param name="initialCollectionSize">Number of messages to put into the collection before running the test.</param>
		[Theory]
		[InlineData(0)]
		[InlineData(1000)]
		protected virtual void ILogMessageCollectionT_AddRange_ArgumentNull(int initialCollectionSize)
		{
			Common_AddRange_ArgumentNull(
				initialCollectionSize,
				collection => collection.AddRange(null));
		}

		// ------------------------------------------------------------------------------------------------------------------

		/// <summary>
		/// Common test code for adding a log message to the collection.
		/// The operation should throw <see cref="NotSupportedException"/>, if the collection is readonly.
		/// </summary>
		/// <param name="initialCollectionSize">Number of messages to put into the collection before running the test.</param>
		/// <param name="numberOfMessagesToAdd">Number of messages to add at once.</param>
		/// <param name="operation">Operation to invoke on the collection.</param>
		private void Common_AddRange(
			int                                                    initialCollectionSize,
			int                                                    numberOfMessagesToAdd,
			Action<TLogMessageCollection, IEnumerable<LogMessage>> operation)
		{
			// create collection to test
			using (TLogMessageCollection collection = CreateCollection(initialCollectionSize, out LogMessage[] messages))
			{
				LogMessageCollectionEventWatcher eventWatcher = collection.AttachEventWatcher();

				// create new messages that is not in the collection, yet
				// (use seed 1 to generate a message that differs from the messages generated by default)
				LogMessage[] newMessages = LoggingTestHelpers.GetTestMessages<LogMessage>(numberOfMessagesToAdd, 1);

				if (CollectionIsReadOnly)
				{
					// collection is read-only and should throw exception
					Assert.Throws<NotSupportedException>(() => operation(collection, newMessages));
					Assert.Equal(initialCollectionSize, collection.Count);
				}
				else
				{
					// add message to the collection
					operation(collection, newMessages);

					// check whether the collection contains the new message now
					Assert.Equal(initialCollectionSize + numberOfMessagesToAdd, collection.Count);
					var expectedMessages = new List<LogMessage>(messages);
					expectedMessages.AddRange(newMessages);
					Assert.Equal(expectedMessages.ToArray(), collection.ToArray()); // does not take IsReadOnly into account
					Assert.All(collection, message => Assert.Equal(CollectionProvidesProtectedMessages, message.IsReadOnly));

					// add events that should have been raised
					for (int i = 0; i < numberOfMessagesToAdd; i++)
					{
						eventWatcher.ExpectCollectionChanged(
							new NotifyCollectionChangedEventArgs(
								NotifyCollectionChangedAction.Add,
								new[] { newMessages[i] },
								initialCollectionSize + i));
					}

					eventWatcher.ExpectPropertyChanged(new PropertyChangedEventArgs("Count"));
					eventWatcher.ExpectPropertyChanged(new PropertyChangedEventArgs("Item[]"));
				}

				// check events that should have been raised
				eventWatcher.CheckInvocations();
			}
		}

		/// <summary>
		/// Common test code for adding multiple log messages to the collection with the log messages to add being a null reference.
		/// The operation should throw <see cref="ArgumentNullException"/>.
		/// </summary>
		/// <param name="initialCollectionSize">Number of messages to put into the collection before running the test.</param>
		/// <param name="operation">Operation to invoke on the collection.</param>
		private void Common_AddRange_ArgumentNull(
			int                                       initialCollectionSize,
			Action<ILogMessageCollection<LogMessage>> operation)
		{
			using (TLogMessageCollection collection = CreateCollection(initialCollectionSize, out LogMessage[] _))
			{
				LogMessageCollectionEventWatcher eventWatcher = collection.AttachEventWatcher();

				// run operation and ensure that the appropriate exception is thrown
				Assert.Throws<ArgumentNullException>(() => operation(collection));
				Assert.Equal(initialCollectionSize, collection.Count);

				// no events should have been raised
				eventWatcher.CheckInvocations();
			}
		}

		#endregion
	}

}
