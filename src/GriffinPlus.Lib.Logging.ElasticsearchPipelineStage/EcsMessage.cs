///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// This file is part of the Griffin+ common library suite (https://github.com/griffinplus/dotnet-libs-logging)
// The source code is licensed under the MIT license.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Net;
using System.Text.Json.Serialization;

namespace GriffinPlus.Lib.Logging.Elasticsearch
{

	/// <summary>
	/// A container for a log message in the ECS (Elasticsearch Common Schema).
	/// Serializing this results in a message that complies to ECS version 1.10.
	/// </summary>
	class EcsMessage
	{
		/// <summary>
		/// Date/time when the event originated (ECS path: @timestamp).
		/// This is the date/time extracted from the event, typically representing when the event was generated by the source.
		/// If the event source has no original timestamp, this value is typically populated by the first time the event was
		/// received by the pipeline. Required field for all events.
		/// Type: date.
		/// See: https://www.elastic.co/guide/en/ecs/1.10/ecs-base.html#field-timestamp
		/// </summary>
		[JsonPropertyName("@timestamp")]
		public DateTime Timestamp { get; set; }

		/// <summary>
		/// Gets or sets a list of keywords used to tag each event (ECS path: tags).
		/// Type: keyword.
		/// See: https://www.elastic.co/guide/en/ecs/1.10/ecs-base.html#field-tags
		/// </summary>
		[JsonPropertyName("tags")]
		public List<string> Tags { get; set; } = new List<string>();

		/// <summary>
		/// For log events the message field contains the log message, optimized for viewing in a log viewer.
		/// For structured logs without an original message field, other fields can be concatenated to form a human-readable summary of the event.
		/// If multiple messages exist, they can be combined into one message.
		/// Type: text.
		/// See: https://www.elastic.co/guide/en/ecs/1.10/ecs-base.html#field-message
		/// </summary>
		[JsonPropertyName("message")]
		public string Message { get; set; }

		/// <summary>
		/// Gets or sets fields breaking down the event details (ECS path: event.*).
		/// </summary>
		[JsonPropertyName("event")]
		public EcsMessage_Event Event { get; set; } = new EcsMessage_Event();

		/// <summary>
		/// Gets or sets fields describing the relevant computing instance (ECS path: host.*).
		/// </summary>
		[JsonPropertyName("host")]
		public EcsMessage_Host Host { get; set; } = new EcsMessage_Host();

		/// <summary>
		/// Gets or sets details about the event's logging mechanism (ECS path: log.*).
		/// </summary>
		[JsonPropertyName("log")]
		public EcsMessage_Log Log { get; set; } = new EcsMessage_Log();

		/// <summary>
		/// Gets or sets fields describing the organization or company the event is associated with (ECS path: organization.*).
		/// </summary>
		[JsonPropertyName("organization")]
		public EcsMessage_Organization Organization { get; set; } = new EcsMessage_Organization();

		/// <summary>
		/// Gets or sets information about a process (ECS path: process.*).
		/// </summary>
		[JsonPropertyName("process")]
		public EcsMessage_Process Process { get; set; } = new EcsMessage_Process();

		/// <summary>
		/// Initializes the ECS message using the specified log message.
		/// </summary>
		/// <param name="message">Log message to initialize the ECS message with.</param>
		/// <param name="organizationId">Id to put into ECS field 'organization.id'.</param>
		/// <param name="organizationName">Name to put into ECS field 'organization.name'.</param>
		public void Initialize(
			LocalLogMessage message,
			string          organizationId,
			string          organizationName)
		{
			// initialize timestamp (always UTC)
			Timestamp = message.Timestamp.UtcDateTime;

			// initialize tags
			Tags.Clear();
			Tags.AddRange(message.Tags);

			// initialize the message text
			Message = message.Text;

			// initialize the event severity (the log level id complies with the syslog level ids)
			// and the name of the log level
			Event.Severity = message.LogLevel.Id;
			switch (message.LogLevel.Id)
			{
				// ReSharper disable StringLiteralTypo

				case 0:
					Debug.Assert(message.LogLevel == LogLevel.Emergency);
					Log.Level = "emerg";
					break;

				case 1:
					Debug.Assert(message.LogLevel == LogLevel.Alert);
					Log.Level = "alert";
					break;

				case 2:
					Debug.Assert(message.LogLevel == LogLevel.Critical);
					Log.Level = "crit";
					break;

				case 3:
					Debug.Assert(message.LogLevel == LogLevel.Error);
					Log.Level = "error";
					break;

				case 4:
					Debug.Assert(message.LogLevel == LogLevel.Warning);
					Log.Level = "warn";
					break;

				case 5:
					Debug.Assert(message.LogLevel == LogLevel.Notice);
					Log.Level = "notice";
					break;

				case 6:
					Debug.Assert(message.LogLevel == LogLevel.Informational);
					Log.Level = "info";
					break;

				case 7:
					Debug.Assert(message.LogLevel == LogLevel.Debug);
					Log.Level = "debug";
					break;

				case 8:
					Debug.Assert(message.LogLevel == LogLevel.Trace);
					Log.Level = "trace";
					break;

				// ReSharper restore StringLiteralTypo

				default:
					// aspect log levels
					// (all aspects must have the same severity id to avoid mixing them up in an aggregated log)
					Event.Severity = 9;
					Log.Level = message.LogLevel.Name;
					break;
			}

			// initialize timezone information
			// (always in the format '-hh:mm' or '+hh::mm'
			Event.Timezone = ToTimezoneOffset(message.Timestamp.Offset);

			// initialize the hostname of the local computer
			Host.Hostname = Dns.GetHostName();

			// initialize the tick counter for relative high-precision measurements (in ns)
			Host.TicksNs = message.HighPrecisionTimestamp;

			// initialize the name of the logger inside the application
			// (this is the name of the log writer in Griffin+ logging)
			Log.Logger = message.LogWriter.Name;

			// initialize the organization id/name
			Organization.Id = organizationId;
			Organization.Name = organizationName;

			// initialize the name and the id of the process
			Process.Name = message.ProcessName;
			Process.Pid = message.ProcessId;

			// initialize the title of the process
			// (this is the name of the application in Griffin+ logging)
			Process.Title = message.ApplicationName;
		}

		/// <summary>
		/// Converts the specified timezone offset to a string in the format '-hh:mm' (negative timezone offsets)
		/// respectively '+hh:mm' (positive timezone offsets).
		/// </summary>
		/// <param name="offset">Timezone offset to format.</param>
		/// <returns></returns>
		private static string ToTimezoneOffset(TimeSpan offset)
		{
			if (offset.Ticks >= 0) return offset.ToString(@"\+hh\:mm");
			offset = offset.Negate();
			return offset.ToString(@"\-hh\:mm");
		}
	}

	/// <summary>
	/// ECS data for event specific information.
	/// </summary>
	class EcsMessage_Event
	{
		/// <summary>
		/// This field should be populated when the event’s timestamp does not include timezone information already
		/// (e.g. default Syslog timestamps). It’s optional otherwise. Acceptable timezone formats are:
		/// a canonical ID(e.g. "Europe/Amsterdam"), abbreviated(e.g. "EST") or an HH:mm differential(e.g. "-05:00").
		/// Type: keyword.
		/// See: https://www.elastic.co/guide/en/ecs/1.10/ecs-event.html#field-event-timezone
		/// </summary>
		[JsonPropertyName("timezone")]
		public string Timezone { get; set; }

		/// <summary>
		/// The numeric severity of the event according to your event source.
		/// What the different severity values mean can be different between sources and use cases.
		/// It’s up to the implementer to make sure severities are consistent across events from the same source.
		/// The syslog severity belongs in log.syslog.severity.code. event.severity is meant to represent the severity
		/// according to the event source (e.g.firewall, IDS). If the event source does not publish its own severity,
		/// you may optionally copy the log.syslog.severity.code to event.severity.
		/// Type: long.
		/// See: https://www.elastic.co/guide/en/ecs/1.10/ecs-event.html#field-event-severity
		/// </summary>
		[JsonPropertyName("severity")]
		[JsonNumberHandling(JsonNumberHandling.Strict)]
		public long Severity { get; set; }
	}

	/// <summary>
	/// ECS data for host specific information.
	/// </summary>
	class EcsMessage_Host
	{
		/// <summary>
		/// Hostname of the host.
		/// It normally contains what the hostname command returns on the host machine.
		/// Type: keyword.
		/// See: https://www.elastic.co/guide/en/ecs/1.10/ecs-host.html#field-host-hostname
		/// </summary>
		[JsonPropertyName("hostname")]
		public string Hostname { get; set; }

		/// <summary>
		/// Tick counter of the host (custom field, shared by processes on the host, in ns).
		/// Type: long.
		/// </summary>
		[JsonPropertyName("TicksNs")]
		public long TicksNs { get; set; }
	}

	/// <summary>
	/// Details about the event’s logging mechanism or logging transport.
	/// The log.* fields are typically populated with details about the logging mechanism used to create
	/// and/or transport the event. For example, syslog details belong under log.syslog.*.
	/// The details specific to your event source are typically not logged under log.*, but rather in
	/// event.* or in other ECS fields.
	/// </summary>
	class EcsMessage_Log
	{
		/// <summary>
		/// Original log level of the log event.
		/// If the source of the event provides a log level or textual severity, this is the one that goes in log.level.
		/// If your source doesn't specify one, you may put your event transport ’s severity here (e.g.Syslog severity).
		/// Some examples are warn, err, i, informational.
		/// Type: keyword.
		/// See: https://www.elastic.co/guide/en/ecs/1.10/ecs-log.html#field-log-level
		/// </summary>
		[JsonPropertyName("level")]
		public string Level { get; set; }

		/// <summary>
		/// The name of the logger inside an application.
		/// This is usually the name of the class which initialized the logger, or can be a custom name.
		/// Type: keyword.
		/// See: https://www.elastic.co/guide/en/ecs/1.10/ecs-log.html#field-log-logger
		/// </summary>
		[JsonPropertyName("logger")]
		public string Logger { get; set; }
	}

	/// <summary>
	/// The organization fields enrich data with information about the company or entity the data is associated with.
	/// These fields help you arrange or filter data stored in an index by one or multiple organizations.
	/// </summary>
	class EcsMessage_Organization
	{
		/// <summary>
		/// Unique identifier for the organization.
		/// Type: keyword.
		/// See: https://www.elastic.co/guide/en/ecs/current/ecs-organization.html#field-organization-id
		/// </summary>
		[JsonPropertyName("id")]
		public string Id { get; set; }

		/// <summary>
		/// Organization name.
		/// Type: keyword.
		/// See: https://www.elastic.co/guide/en/ecs/current/ecs-organization.html#field-organization-name
		/// </summary>
		[JsonPropertyName("name")]
		public string Name { get; set; }
	}

	/// <summary>
	/// ECS data for process specific information.
	/// </summary>
	class EcsMessage_Process
	{
		/// <summary>
		/// Process name.
		/// Sometimes called program name or similar.
		/// Type: keyword.
		/// See: https://www.elastic.co/guide/en/ecs/1.10/ecs-process.html#field-process-name
		/// </summary>
		[JsonPropertyName("name")]
		public string Name { get; set; }

		/// <summary>
		/// Process id.
		/// Type: long.
		/// See: https://www.elastic.co/guide/en/ecs/1.10/ecs-process.html#field-process-pid
		/// </summary>
		[JsonPropertyName("pid")]
		[JsonNumberHandling(JsonNumberHandling.Strict)]
		public long Pid { get; set; }

		/// <summary>
		/// Process title.
		/// The process title is some times the same as process name.
		/// Can also be different: for example a browser setting its title to the web page currently opened.
		/// Type: keyword.
		/// See: https://www.elastic.co/guide/en/ecs/1.10/ecs-process.html#field-process-title
		/// </summary>
		[JsonPropertyName("title")]
		public string Title { get; set; }
	}

}
