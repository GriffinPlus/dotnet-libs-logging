trigger:
  tags:
    include:
    - v*
  branches:
    include:
    - master

pool:
  vmImage: 'windows-latest'

variables:
  BuildConfiguration: 'Release'

steps:
- task: UseDotNet@2
  displayName: 'Use .NET Core sdk'
  inputs:
    packageType: sdk
    version: 2.x
    installationPath: $(Agent.ToolsDirectory)/dotnet

- task: GitVersion@5
  displayName: 'GitVersion'
  inputs:
    runtime: 'core'

- task: DotNetCoreCLI@2
  displayName: 'Restore'
  inputs:
    command: restore
    projects: '**/*.csproj'

- task: DotNetCoreCLI@2
  displayName: 'Build'
  inputs:
    command: 'build'
    projects: '**/*.csproj'
    arguments: '--configuration $(BuildConfiguration) /p:InformationalVersion=$(GitVersion.InformationalVersion)'
    versioningScheme: 'byEnvVar'
    versionEnvVar: 'GitVersion.SemVer'

- task: DotNetCoreCLI@2
  displayName: 'Test'
  inputs:
    command: 'test'
    projects: '**/*Tests/*.csproj'
    nobuild: true
    arguments: '--configuration $(buildConfiguration)'

- task: PowerShell@2
  displayName: 'Pack'
  inputs:
    targetType: 'inline'
    script: |
      foreach ( $file in Get-ChildItem -Include *.nuspec -Recurse ) {
        Write-Host "Processing file $($file.FullName)..."
        nuget.exe pack `
           "$($file.FullName)" `
           -Symbols `
           -SymbolPackageFormat snupkg `
           -Properties version=$(GitVersion.NuGetVersion) `
           -OutputDirectory "$(Build.ArtifactStagingDirectory)" `
           -Verbosity detailed
        if ($lastexitcode -ne 0) { throw("Creating nuget package failed.") }
      }

- task: NuGetCommand@2
  displayName: 'Publish'
  condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/v')
  inputs:
    command: push
    nuGetFeedType: external
    publishFeedCredentials: 'nuget.org'
